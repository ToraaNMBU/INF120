# -*-coding: utf-8 -*-

from ferdig_indeks import last_in_indeks  # Her laster vi inn en ferdig s√∏keindeks

liste_av_mengder=[]

def fjern_spesialtegn(streng):
    #[',', '.', '"', '\'', ':', ';', '(', ')', '-', '?', '!']``
    
    steng=streng.translate({ord(i): None for i in ',."\:;()-?!'})
    return streng


def finn_unike_ord_i_streng(streng):
    
    streng=fjern_spesialtegn(streng)
    streng=streng.lower()
    streng=streng.strip()
    streng=streng.split()
    unike_ord=set(streng)
    liste_av_mengder.append(unike_ord)
    return unike_ord

    

def finn_felles_ellement_i_flere_mengder(liste_av_mengder):
    """
    Lag en funksjon som finner felles element i en samling av mengder (set).
    
    Arguments
    ---------
    liste_av_mengder : List[Set]
        En liste hvor hvert element er en mengde (set p√• engelsk).
    
    Returns
    -------
    snitt_av_mengder : Set[str]
        En mengde som kun inneholder de elementene som er del av ALLE
        mengdene i ``liste_av_mengder``.
    
    Notes
    -----
    Vi kan finne snittet mellom to mengder med ``intersection`` funksjonen.

    >>> mengde1 = {1, 2, 3}
    >>> mengde2 = {2, 3, 4}
    >>> mengde1.intersection(mengde2)
    {2, 3}
    
    Om vi tar snittet mellom en mengde og seg selv s√• endres ingen ting.

    >>> mengde1 = {1, 2, 3}
    >>> mengde1 = mengde1.intersection(mengde1)
    >>> print(mengde1)
    {1, 2, 3}

    Examples
    -------
    >>> mengde1 = {1, 2, 3}
    >>> mengde2 = {2, 3, 4}
    >>> liste_av_mengder = [mengde1, mengde2]
    >>> finn_felles_element_i_flere_mengder(liste_av_mengder)
    {2, 3}
    >>> mengde3 = {3, 4, 5}
    >>> liste_av_mengder = [mengde1, mengde2, mengde3]
    >>> finn_felles_element_i_flere_mengder(liste_av_mengder)
    {3}
    """
    
    #Lager en tom liste
    felles_element=[]
    for set1 in range (len(liste_av_mengder)):
        #felles for 1 og n
        midlertidig=liste_av_mengder[0].intersection(liste_av_mengder[set1])
        liste_av_mengder[0]=midlertidig
    felles_liste=midlertidig
    return felles_liste 

    
    


def s¯keindeks_med_mengde(indeks, mengde_av_s¯keord):
    """
    Finn alle dokument som inneholder alle s¯keordene i ``mengde_s¯keord``.

    Denne funksjonen skal ta to argument som input, en s¯keindeks og 
    en mengde med s¯keord.

    S¯keindeksen er en dictionary med engelske ord som n¯kler og mengden med alle
    dokument som inneholder det ordet som verdi.

    Mengden med s¯keord er en mengde (set pÂ Engelsk) som beskriver hva
    som s¯kes etter.

    Det som returneres er mengden med dokument som inneholder ALLE s¯keordene.

    Arguments
    ---------
    indeks : dict[str] -> Set[str]
        S√∏keindeksen.
    mengde_av_s√∏keord : Set[str]
        Mengden med s√∏keord.

    Returns
    -------
    relevante_b¯ker : Set[str]
        Mengden med b¯ker som inneholder alle ordene i ``mengde_av_s√∏keord``.

    Notes
    -----
    Husk ``finn_felles_ellement_i_flere_mengder`` funksjonen din.

    Vi kan teste om et element er en n¯kkel i en dictionary med ``in`` n¯kkelordet

    >>> d = {'a': 1, 'b': 2}
    >>> 'a' in d
    True
    >>> 1 in d
    False

    Vi kan lage en tom mengde med ``set`` funksjonen.

    >>> tom_mengde = set()
    >>> print(tom_mengde)
    {}

    Examples
    --------
    >>> indeks = last_inn_indeks()
    >>> s¯keindeks_med_streng(indeks, {"sherlock", "holmes", "scarlet")
    {'Chronicles_of_Martin_Hewitt.bok', 'The_Hound_of_the_Baskervilles.bok'}
    >>> s¯keindeks_med_streng(indeks, {"Dette", "er", "ikke", "i", "indeksen"})
    {}
    """
    mulige_b¯ker={}
    
    finn_felles_ellement_i_flere_mengder(liste_av_mengder):
    

    return mulige_b√∏ker


def klargj√∏r_s√∏kestreng(s√∏kestreng):
    r"""
    Ta inn en s√∏kestreng og klargj√∏r den for √• s√∏ke i en s√∏keindeks.

    Strengen skal behandles p√• samme m√•te som vi behandler nye strenger
    som skal indekseres. Store bokstaver skal gj√∏res om til sm√•,
    spesialtegn skal fjernes og "whitespace" tegn p√• starten og slutten
    av strengen skal fjernes. Til slutt skal strengen splittes ved 
    alle mellomrom og duplikatord skal fjernes.

    Arguments
    ---------
    s√∏kestreng : str
        Strengen vi vil finne unike tegn i.
    
    Returns
    -------
    ord_i_streng : Set[str]
        Mengden med unike ord i strengen.
    
    Notes
    -----
    Kan du gjenbruke en funksjon du lagde tidligere i obligen?

    Examples
    --------
    >>> streng = "abc1, hei p√• deg. Hva heter du?"
    >>> klargj√∏r_s√∏kestreng(streng)
    "abc1 hei p√• deg Hva heter du"

    >>> streng = "  Hei p√• deg!!!\n"
    >>> klargj√∏r_s√∏kestreng(streng)
    "Hei p√• deg"
    """
    klargjort_streng = None  # Slett denne linja
    # Skriv kode her

    return klargjort_streng


def s√∏k_i_indeks_med_streng(indeks, s√∏kestreng):
    """
    Finn alle dokument som inneholder alle s√∏keordene i ``s√∏kestreng``.

    Denne funksjonen skal ta to argument som input, en s√∏keindeks og 
    en mengde med s√∏keord.

    S√∏keindeksen er en dictionary med engelske ord som n√∏kler og mengden med alle
    dokument som inneholder det ordet som verdi.

    S√∏kestrengen skal f√∏rst klargj√∏res. Dette gj√∏res ved √• gj√∏re strengen til
    sm√• bokstaver og √• fjerne spesialtegn. I tillegg skal og whitespace p√• 
    starten og slutten av strengen fjernes. Deretter skal hvert ord i 
    s√∏kestrengen hentes ut. Disse ordene brukes n√•r det skal s√∏kes i
    de indekserte dokumentene.

    Det som returneres er mengden med dokument som inneholder ALLE s√∏keordene.

    Arguments
    ---------
    indeks : dict
        S√∏keindeksen.
    mengde_av_s√∏keord : str
        Mengden med s√∏keord.

    Returns
    -------
    relevante_b√∏ker : Set[str]
        Mengden med b√∏ker som inneholder alle ordene i ``mengde_av_s√∏keord``.

    Notes
    -----
    Husk ``s√∏k_i_indeks_med_mengde`` og ``klargj√∏r_s√∏kestreng`` funksjonene
    dine.

    Examples
    --------
    >>> indeks = last_inn_indeks()
    >>> s√∏k_i_indeks_med_streng(indeks, "Sherlock Holmes, scarlet")
    {'Chronicles_of_Martin_Hewitt.bok', 'The_Hound_of_the_Baskervilles.bok'}
    >>> s√∏k_i_indeks_med_streng(indeks, "Dette er ikke i indeksen")
    {}
    """
    mulige_b√∏ker = None  # Slett denne linja
    # Skriv kode her

    return mulige_b√∏ker


if __name__ == "__main__":
    s√∏kestreng = "Sherlock Holmes, scarlet"
    indeks = last_in_indeks()  # Jeg (Yngve) har allerede lagd en indeks dere kan s√∏ke i
                               # Den henter vi ut her.

    print(s√∏k_i_indeks_med_streng(indeks, s√∏kestreng))
    # Denne skal printe
    #  {'Chronicles_of_Martin_Hewitt.bok', 'The_Hound_of_the_Baskervilles.bok'}